# Deploy OpenVPN to server
---
name: Deploy OpenVPN

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH and deploy
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Debug environment variables (masked)
          echo "Checking environment variables..."
          echo "SERVER_HOST is${SERVER_HOST:+ set}"
          echo "SERVER_USER is${SERVER_USER:+ set}"
          echo "AZURE_SSH_KEY is${AZURE_SSH_KEY:+ set}"
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${SERVER_HOST} $(ssh-keyscan -t rsa -H "${SERVER_HOST}" 2>/dev/null)" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create remote directory first
          echo "Creating remote directory..."
          ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "sudo mkdir -p /opt/openvpn && sudo chown -R \$(whoami):\$(whoami) /opt/openvpn"
          
          # Create deployment script
          echo "Creating deployment script..."
          cat > deploy_remote.sh << 'EOL'
          #!/bin/bash
          set -e
          echo "Starting deployment..."
          
          cd /opt/openvpn
          
          # Clean up old files except volumes
          sudo find . -mindepth 1 -maxdepth 1 ! -name 'openvpn_data' -exec rm -rf {} +
          
          # Create .env file
          cat > .env << EOF
          DOCKER_USERNAME=$DOCKER_USERNAME
          DOCKER_PASSWORD=$DOCKER_PASSWORD
          DOCKER_TOKEN=$DOCKER_TOKEN
          GH_TOKEN=$GH_TOKEN
          EOF
          
          # Run deployment with sudo
          sudo -E ./deploy.sh
          EOL
          
          # Copy files to server
          echo "Copying files to server..."
          scp -o StrictHostKeyChecking=no -r ./* "${SERVER_USER}@${SERVER_HOST}:/opt/openvpn/"
          scp -o StrictHostKeyChecking=no deploy_remote.sh "${SERVER_USER}@${SERVER_HOST}:/opt/openvpn/"
          
          # Set permissions and execute deployment
          echo "Starting remote deployment..."
          ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && sudo chmod +x *.sh && DOCKER_USERNAME='${DOCKER_USERNAME}' DOCKER_PASSWORD='${DOCKER_PASSWORD}' DOCKER_TOKEN='${DOCKER_TOKEN}' GH_TOKEN='${GH_TOKEN}' sudo -E ./deploy_remote.sh"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Test OpenVPN connection
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${AZURE_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${SERVER_HOST} $(ssh-keyscan -t rsa -H "${SERVER_HOST}" 2>/dev/null)" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Run tests
          echo "Running tests..."
          ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && sudo ./test_ports.sh"
