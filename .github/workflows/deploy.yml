name: Deploy OpenVPN

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          debug: true
          command_timeout: 10m
          script_stop: true
          script: |
            set -e
            echo "Starting deployment..."
            
            # Ensure target directory exists
            mkdir -p /opt/openvpn
            cd /opt/openvpn
            
            # Clean up old files except volumes
            find . -mindepth 1 -maxdepth 1 ! -name 'openvpn_data' -exec rm -rf {} +
            
            # Create temporary directory for new files
            TEMP_DIR=$(mktemp -d)
            cd $TEMP_DIR
            
            # Clone repository
            git clone https://github.com/${{ github.repository }} .
            
            # Copy files to target directory
            cp -r * /opt/openvpn/
            cd /opt/openvpn
            
            # Set permissions
            chmod +x *.sh
            
            # Create .env file
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
            DOCKER_TOKEN=${{ secrets.DOCKER_TOKEN }}
            GH_TOKEN=${{ secrets.GH_TOKEN }}
            EOF
            
            # Clean up temporary directory
            rm -rf $TEMP_DIR
            
            # Run deployment
            ./deploy.sh

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Test OpenVPN connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          debug: true
          command_timeout: 5m
          script_stop: true
          script: |
            set -e
            cd /opt/openvpn && ./test_ports.sh
