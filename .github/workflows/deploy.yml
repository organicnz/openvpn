name: Deploy OpenVPN

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH and deploy
        env:
          SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Validate environment variables
          if [ -z "$SSH_HOST" ]; then
            echo "Error: SSH_HOST is not set"
            exit 1
          fi
          if [ -z "$SSH_USER" ]; then
            echo "Error: SSH_USER is not set"
            exit 1
          fi
          if [ -z "$SSH_KEY" ]; then
            echo "Error: SSH_KEY is not set"
            exit 1
          fi
          
          echo "Setting up SSH with host: $SSH_HOST and user: $SSH_USER"
          
          # Setup SSH
          sudo rm -rf ~/.ssh
          sudo mkdir -p ~/.ssh
          echo "$SSH_KEY" | sudo tee ~/.ssh/id_rsa > /dev/null
          sudo chmod 600 ~/.ssh/id_rsa
          sudo chown -R $(whoami):$(whoami) ~/.ssh
          ssh-keyscan -t rsa -H "$SSH_HOST" | sudo tee -a ~/.ssh/known_hosts > /dev/null
          sudo chmod 644 ~/.ssh/known_hosts
          
          # Test SSH connection first
          echo "Testing SSH connection..."
          if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SSH_USER@$SSH_HOST "echo 'SSH connection successful'"; then
            echo "Error: Failed to establish SSH connection to $SSH_HOST"
            exit 1
          fi
          
          # Create deployment script
          echo "Creating deployment script..."
          cat > deploy_remote.sh << 'EOL'
          #!/bin/bash
          set -e
          echo "Starting deployment..."
          
          # Ensure target directory exists
          sudo mkdir -p /opt/openvpn
          sudo chown -R $(whoami):$(whoami) /opt/openvpn
          cd /opt/openvpn
          
          # Clean up old files except volumes
          sudo find . -mindepth 1 -maxdepth 1 ! -name 'openvpn_data' -exec rm -rf {} +
          
          # Create .env file
          cat > .env << EOF
          DOCKER_USERNAME=$DOCKER_USERNAME
          DOCKER_PASSWORD=$DOCKER_PASSWORD
          DOCKER_TOKEN=$DOCKER_TOKEN
          GH_TOKEN=$GH_TOKEN
          EOF
          
          # Run deployment with sudo
          sudo -E ./deploy.sh
          EOL
          
          # Copy files to server
          echo "Copying files to server..."
          scp -o StrictHostKeyChecking=no -r ./* $SSH_USER@$SSH_HOST:/opt/openvpn/
          scp -o StrictHostKeyChecking=no deploy_remote.sh $SSH_USER@$SSH_HOST:/opt/openvpn/
          
          # Execute deployment
          echo "Starting remote deployment..."
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd /opt/openvpn && sudo chmod +x *.sh && DOCKER_USERNAME='$DOCKER_USERNAME' DOCKER_PASSWORD='$DOCKER_PASSWORD' DOCKER_TOKEN='$DOCKER_TOKEN' GH_TOKEN='$GH_TOKEN' sudo -E ./deploy_remote.sh"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Test OpenVPN connection
        env:
          SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          SSH_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Validate environment variables
          if [ -z "$SSH_HOST" ]; then
            echo "Error: SSH_HOST is not set"
            exit 1
          fi
          if [ -z "$SSH_USER" ]; then
            echo "Error: SSH_USER is not set"
            exit 1
          fi
          if [ -z "$SSH_KEY" ]; then
            echo "Error: SSH_KEY is not set"
            exit 1
          fi
          
          echo "Setting up SSH with host: $SSH_HOST and user: $SSH_USER"
          
          # Setup SSH
          sudo rm -rf ~/.ssh
          sudo mkdir -p ~/.ssh
          echo "$SSH_KEY" | sudo tee ~/.ssh/id_rsa > /dev/null
          sudo chmod 600 ~/.ssh/id_rsa
          sudo chown -R $(whoami):$(whoami) ~/.ssh
          ssh-keyscan -t rsa -H "$SSH_HOST" | sudo tee -a ~/.ssh/known_hosts > /dev/null
          sudo chmod 644 ~/.ssh/known_hosts
          
          # Run tests
          echo "Running tests..."
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd /opt/openvpn && sudo ./test_ports.sh"
