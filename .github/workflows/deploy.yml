# Deploy OpenVPN server using Docker
name: Deploy OpenVPN
run-name: Deploy OpenVPN to ${{ github.ref_name }}

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify required files
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "Error: docker-compose.yml not found in repository"
            exit 1
          fi

      - name: Setup SSH and deploy
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -e
          
          function log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          function error() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $1" >&2
            exit 1
          }
          
          # Verify environment variables
          log "Checking environment variables..."
          for var in SERVER_HOST SERVER_USER AZURE_SSH_KEY DOCKER_USERNAME DOCKER_PASSWORD DOCKER_TOKEN GH_TOKEN; do
            if [ -z "${!var}" ]; then
              error "$var is not set"
            fi
            log "$var is set"
          done
          
          # Setup SSH
          log "Setting up SSH..."
          mkdir -p ~/.ssh || error "Failed to create SSH directory"
          echo "${AZURE_SSH_KEY}" > ~/.ssh/id_rsa || error "Failed to write SSH key"
          chmod 600 ~/.ssh/id_rsa || error "Failed to set SSH key permissions"
          
          # Get server's SSH key
          log "Getting server's SSH key..."
          if ! ssh-keyscan -t rsa -H "${SERVER_HOST}" > /tmp/known_hosts 2>/dev/null; then
            error "Failed to get server's SSH key"
          fi
          cat /tmp/known_hosts > ~/.ssh/known_hosts || error "Failed to write known_hosts"
          chmod 644 ~/.ssh/known_hosts || error "Failed to set known_hosts permissions"
          
          # Test SSH connection
          log "Testing SSH connection..."
          if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${SERVER_USER}@${SERVER_HOST}" "echo 'SSH connection successful'"; then
            error "Failed to establish SSH connection"
          fi
          
          # Create remote directory
          log "Creating remote directory..."
          if ! ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "sudo mkdir -p /opt/openvpn && sudo chown -R \$(whoami):\$(whoami) /opt/openvpn"; then
            error "Failed to create remote directory"
          fi
          
          # Copy repository files to server
          log "Copying repository files to server..."
          if ! scp -o StrictHostKeyChecking=no -r ./* "${SERVER_USER}@${SERVER_HOST}:/opt/openvpn/"; then
            error "Failed to copy repository files"
          fi
          
          # Create .env file on server
          log "Creating .env file on server..."
          if ! ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && cat > .env << EOF
          DOCKER_USERNAME='${DOCKER_USERNAME}'
          DOCKER_PASSWORD='${DOCKER_PASSWORD}'
          DOCKER_TOKEN='${DOCKER_TOKEN}'
          GH_TOKEN='${GH_TOKEN}'
          EOF"; then
            error "Failed to create .env file"
          fi
          
          # Clean up Docker resources
          log "Cleaning up Docker resources..."
          if ! ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && \
            sudo docker-compose down --remove-orphans && \
            sudo docker network prune -f"; then
            error "Failed to clean up Docker resources"
          fi
          
          # Execute deployment
          log "Starting deployment..."
          if ! ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && \
            sudo chmod +x *.sh && \
            sudo -E docker-compose pull && \
            sudo -E docker network prune -f && \
            sudo -E docker-compose up -d"; then
            error "Deployment failed"
          fi
          
          log "Deployment completed successfully"

  test:
    name: Test Connection
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 5
    steps:
      - name: Test OpenVPN connection
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          set -e
          
          function log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          function error() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $1" >&2
            exit 1
          }
          
          # Verify environment variables
          log "Checking environment variables..."
          for var in SERVER_HOST SERVER_USER AZURE_SSH_KEY; do
            if [ -z "${!var}" ]; then
              error "$var is not set"
            fi
            log "$var is set"
          done
          
          # Setup SSH
          log "Setting up SSH..."
          mkdir -p ~/.ssh || error "Failed to create SSH directory"
          echo "${AZURE_SSH_KEY}" > ~/.ssh/id_rsa || error "Failed to write SSH key"
          chmod 600 ~/.ssh/id_rsa || error "Failed to set SSH key permissions"
          
          # Get server's SSH key
          log "Getting server's SSH key..."
          if ! ssh-keyscan -t rsa -H "${SERVER_HOST}" > /tmp/known_hosts 2>/dev/null; then
            error "Failed to get server's SSH key"
          fi
          cat /tmp/known_hosts > ~/.ssh/known_hosts || error "Failed to write known_hosts"
          chmod 644 ~/.ssh/known_hosts || error "Failed to set known_hosts permissions"
          
          # Run tests
          log "Running tests..."
          if ! ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && docker ps | grep -q openvpn"; then
            error "OpenVPN container is not running"
          fi
          
          log "Tests completed successfully"
