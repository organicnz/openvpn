# Deploy OpenVPN to server
---
name: Deploy OpenVPN

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Check required secrets
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          missing_secrets=()
          
          # Check each required secret
          [ -z "$SERVER_HOST" ] && missing_secrets+=("SERVER_HOST (Server hostname or IP address)")
          [ -z "$SERVER_USER" ] && missing_secrets+=("SERVER_USER (Server SSH username)")
          [ -z "$AZURE_SSH_KEY" ] && missing_secrets+=("AZURE_SSH_KEY (SSH private key)")
          [ -z "$DOCKER_USERNAME" ] && missing_secrets+=("DOCKER_USERNAME (Docker Hub username)")
          [ -z "$DOCKER_PASSWORD" ] && missing_secrets+=("DOCKER_PASSWORD (Docker Hub password)")
          [ -z "$DOCKER_TOKEN" ] && missing_secrets+=("DOCKER_TOKEN (Docker Hub token)")
          [ -z "$GH_TOKEN" ] && missing_secrets+=("GH_TOKEN (GitHub token)")
          
          # If any secrets are missing, fail the workflow
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing:"
            printf '%s\n' "${missing_secrets[@]}"
            echo "Please add these secrets in your GitHub repository:"
            echo "1. Go to your repository settings"
            echo "2. Click on 'Secrets and variables' â†’ 'Actions'"
            echo "3. Click on 'New repository secret'"
            echo "4. Add each missing secret with its value"
            exit 1
          fi
          
          echo "All required secrets are set"

  deploy:
    needs: check-secrets
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH and deploy
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Debug environment variables (masked)
          echo "Checking environment variables..."
          echo "SERVER_HOST is${SERVER_HOST:+ set}"
          echo "SERVER_USER is${SERVER_USER:+ set}"
          echo "AZURE_SSH_KEY is${AZURE_SSH_KEY:+ set}"
          
          # Setup SSH
          sudo rm -rf ~/.ssh
          sudo mkdir -p ~/.ssh
          echo "${AZURE_SSH_KEY}" | sudo tee ~/.ssh/id_rsa > /dev/null
          sudo chmod 600 ~/.ssh/id_rsa
          sudo chown -R $(whoami):$(whoami) ~/.ssh
          ssh-keyscan -t rsa -H "${SERVER_HOST}" | sudo tee -a ~/.ssh/known_hosts > /dev/null
          sudo chmod 644 ~/.ssh/known_hosts
          
          # Test SSH connection first
          echo "Testing SSH connection..."
          if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${SERVER_USER}@${SERVER_HOST}" "echo 'SSH connection successful'"; then
            echo "Error: Failed to establish SSH connection to ${SERVER_HOST}"
            exit 1
          fi
          
          # Create deployment script
          echo "Creating deployment script..."
          cat > deploy_remote.sh << 'EOL'
          #!/bin/bash
          set -e
          echo "Starting deployment..."
          
          # Ensure target directory exists
          sudo mkdir -p /opt/openvpn
          sudo chown -R $(whoami):$(whoami) /opt/openvpn
          cd /opt/openvpn
          
          # Clean up old files except volumes
          sudo find . -mindepth 1 -maxdepth 1 ! -name 'openvpn_data' -exec rm -rf {} +
          
          # Create .env file
          cat > .env << EOF
          DOCKER_USERNAME=$DOCKER_USERNAME
          DOCKER_PASSWORD=$DOCKER_PASSWORD
          DOCKER_TOKEN=$DOCKER_TOKEN
          GH_TOKEN=$GH_TOKEN
          EOF
          
          # Run deployment with sudo
          sudo -E ./deploy.sh
          EOL
          
          # Copy files to server
          echo "Copying files to server..."
          scp -o StrictHostKeyChecking=no -r ./* "${SERVER_USER}@${SERVER_HOST}:/opt/openvpn/"
          scp -o StrictHostKeyChecking=no deploy_remote.sh "${SERVER_USER}@${SERVER_HOST}:/opt/openvpn/"
          
          # Execute deployment
          echo "Starting remote deployment..."
          ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && sudo chmod +x *.sh && DOCKER_USERNAME='${DOCKER_USERNAME}' DOCKER_PASSWORD='${DOCKER_PASSWORD}' DOCKER_TOKEN='${DOCKER_TOKEN}' GH_TOKEN='${GH_TOKEN}' sudo -E ./deploy_remote.sh"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Test OpenVPN connection
        env:
          AZURE_SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Debug environment variables (masked)
          echo "Checking environment variables..."
          echo "SERVER_HOST is${SERVER_HOST:+ set}"
          echo "SERVER_USER is${SERVER_USER:+ set}"
          echo "AZURE_SSH_KEY is${AZURE_SSH_KEY:+ set}"
          
          # Setup SSH
          sudo rm -rf ~/.ssh
          sudo mkdir -p ~/.ssh
          echo "${AZURE_SSH_KEY}" | sudo tee ~/.ssh/id_rsa > /dev/null
          sudo chmod 600 ~/.ssh/id_rsa
          sudo chown -R $(whoami):$(whoami) ~/.ssh
          ssh-keyscan -t rsa -H "${SERVER_HOST}" | sudo tee -a ~/.ssh/known_hosts > /dev/null
          sudo chmod 644 ~/.ssh/known_hosts
          
          # Run tests
          echo "Running tests..."
          ssh -o StrictHostKeyChecking=no "${SERVER_USER}@${SERVER_HOST}" "cd /opt/openvpn && sudo ./test_ports.sh"
