name: Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DEPLOYMENT_PATH: /opt/openvpn
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/openvpn-admin

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: |
          docker-compose config --quiet

      - name: Build images
        run: |
          docker-compose build --no-cache

      - name: Run integration tests
        run: |
          ./tests/integration-test.sh

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'openvpn-admin:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

  build-push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push admin image
        uses: docker/build-push-action@v5
        with:
          context: ./admin
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: ./.github/actions/setup-ssh

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
            sudo mkdir -p $DEPLOYMENT_PATH &&
            sudo chown -R \$(whoami):\$(whoami) $DEPLOYMENT_PATH
          "

          # Deploy files
          rsync -avz --exclude=".git*" --exclude="tests/" ./ "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:$DEPLOYMENT_PATH/"

          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
            cd $DEPLOYMENT_PATH &&

            # Initialize secrets
            ./scripts/init-secrets.sh || true
            echo '${{ secrets.OPENVPN_ADMIN_USERNAME }}' > secrets/admin_username.txt
            echo '${{ secrets.OPENVPN_ADMIN_PASSWORD }}' > secrets/admin_password.txt
            echo '${{ secrets.CA_PASSWORD }}' > secrets/ca_password.txt
            chmod -R 600 secrets/

            # Create environment file
            cat > .env << 'EOF'
          VPN_DOMAIN=${{ secrets.SERVER_HOST }}
          OVPN_SERVER=10.20.0.0/24
          OVPN_DNS=8.8.8.8,8.8.4.4
          DEBUG=0
          EOF

            # Initialize OpenVPN if needed
            if [[ ! -d openvpn_data/pki ]]; then
              mkdir -p openvpn_data
              docker run --rm -v \$PWD/openvpn_data:/etc/openvpn kylemanna/openvpn \
                ovpn_genconfig -u udp://${{ secrets.SERVER_HOST }}:1194 -s 10.20.0.0/24
              echo '${{ secrets.CA_PASSWORD }}' | docker run --rm -i \
                -v \$PWD/openvpn_data:/etc/openvpn kylemanna/openvpn \
                ovpn_initpki nopass
            fi

            # Zero-downtime deployment
            docker-compose pull
            docker-compose up -d --remove-orphans
          "

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh

      - name: Health check
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
            cd $DEPLOYMENT_PATH &&

            # Wait for services to be ready
            timeout=180
            elapsed=0

            while [[ \$elapsed -lt \$timeout ]]; do
              if curl -f -s http://localhost:8080/health >/dev/null 2>&1; then
                echo '✅ Deployment successful - all services healthy'

                # Verify all containers
                containers='openvpn-server openvpn-admin-panel openvpn-status-page'
                for container in \$containers; do
                  if docker ps | grep -q \$container; then
                    echo '✓ Container \$container is running'
                  fi
                done

                exit 0
              fi
              sleep 5
              elapsed=\$((elapsed + 5))
            done

            echo '❌ Health check failed'
            docker-compose logs --tail=20
            exit 1
          "

  post-deploy:
    name: Post-deployment Setup
    runs-on: ubuntu-latest
    needs: verify
    if: success()
    steps:
      - name: Setup SSH
        uses: ./.github/actions/setup-ssh

      - name: Configure monitoring and cleanup
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
            cd $DEPLOYMENT_PATH &&

            # Setup monitoring cron job
            (crontab -l 2>/dev/null | grep -v openvpn-monitor; echo '*/5 * * * * cd $DEPLOYMENT_PATH && docker-compose ps | grep -q healthy || docker-compose restart') | crontab -

            # Cleanup old images
            docker system prune -f --filter 'until=24h' || true

            echo '🚀 Production deployment completed successfully!'
            echo 'Services available at:'
            echo '- Admin Panel: http://${{ secrets.SERVER_HOST }}:8080'
            echo '- Status Page: http://${{ secrets.SERVER_HOST }}:8081'
            echo '- Grafana: http://${{ secrets.SERVER_HOST }}:3000'
            echo '- Prometheus: http://${{ secrets.SERVER_HOST }}:9090'
          "