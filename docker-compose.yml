# Deploy OpenVPN server using Docker

services:
  # Main OpenVPN service
  openvpn:
    image: kylemanna/openvpn:latest
    container_name: openvpn-server
    cap_add:
      - NET_ADMIN
    ports:
      - 1194:1194/udp
      - 1195:1194/tcp  # Use port 1195 for TCP to avoid conflicts
      - 3005-3009:3005-3009/tcp  # Port forwarding range
    volumes:
      - ./openvpn_data:/etc/openvpn
      - ./client_configs:/etc/openvpn/clients:ro
    environment:
      - EASYRSA_BATCH=1
      - EASYRSA_REQ_CN=OpenVPN CA
      - OVPN_SERVER=10.20.0.0/24
      - OVPN_DNS=8.8.8.8,8.8.4.4
      - OVPN_CLIENT_TO_CLIENT=1
      - OVPN_DUPLICATE_CN=1
      - DEBUG=1
    # Create a startup script that ensures environment file exists
    entrypoint: |
      bash -c '
      # Set proper error handling
      set -e
      trap "echo "Error occurred! Exiting..."; exit 1" ERR
      
      if [ ! -f /etc/openvpn/ovpn_env.sh ]; then
        echo "Creating missing environment file..."
        
        # Create environment file with proper configuration
        cat > /etc/openvpn/ovpn_env.sh << EOF
export OVPN_AUTH=
export OVPN_CIPHER=AES-256-GCM
export OVPN_CLIENT_TO_CLIENT=1
export OVPN_CN=${HOSTNAME}
export OVPN_COMP_LZO=0
export OVPN_DEFROUTE=1
export OVPN_DEVICE=tun
export OVPN_DEVICEN=0
export OVPN_DISABLE_PUSH_BLOCK_DNS=0
export OVPN_DNS=1
export OVPN_DNS_SERVERS=("8.8.8.8" "8.8.4.4")
export OVPN_ENV=/etc/openvpn/ovpn_env.sh
export OVPN_EXTRA_CLIENT_CONFIG=()
export OVPN_EXTRA_SERVER_CONFIG=()
export OVPN_FRAGMENT=
export OVPN_MTU=
export OVPN_NAT=1
export OVPN_OTP_AUTH=
export OVPN_PORT=1194
export OVPN_PROTO=both
export OVPN_PUSH=()
export OVPN_ROUTES=([0]="10.20.0.0/24")
export OVPN_SERVER=10.20.0.0/24
export OVPN_SERVER_URL=udp://${HOSTNAME}:1194
export OVPN_SERVER_URL_TCP=tcp://${HOSTNAME}:1195
export OVPN_TLS_CIPHER=TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384
export OVPN_TLS_VERSION_MIN=1.2
export OVPN_DUPLICATE_CN=1
EOF
        chmod 644 /etc/openvpn/ovpn_env.sh
        
        echo "Environment file created successfully:"
        ls -la /etc/openvpn/ovpn_env.sh
      else
        echo "Using existing environment file:"
        ls -la /etc/openvpn/ovpn_env.sh
      fi
      
      echo "Starting OpenVPN server..."
      exec ovpn_run
      '
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pidof", "openvpn"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    networks:
      openvpn_net:
        ipv4_address: 10.20.0.2

  # Simple Admin Panel for OpenVPN
  openvpn-admin:
    image: kylemanna/openvpn:2.4
    container_name: openvpn-admin-panel
    depends_on:
      - openvpn
    ports:
      - 8080:80
    volumes:
      - ./openvpn_data:/etc/openvpn:ro  # Use the same volume pattern as main service
    environment:
      - OPENVPN_ADMIN_USERNAME=${OPENVPN_ADMIN_USERNAME:-admin}
      - OPENVPN_ADMIN_PASSWORD=${OPENVPN_ADMIN_PASSWORD:-admin}
    command: ["sh", "-c", "echo 'Running simple admin interface' && sleep infinity"]
    networks:
      openvpn_net:
        ipv4_address: 10.20.0.3
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3

  # Status Page for OpenVPN (alternative simple interface)
  openvpn-status:
    image: auspexeu/openvpn-status:latest
    container_name: openvpn-status-page
    depends_on:
      - openvpn
    ports:
      - 8081:80
    environment:
      - OPENVPN_STATUS_LOG=/var/log/openvpn/status.log
      - OPENVPN_MANAGEMENT_HOST=openvpn-server
      - OPENVPN_MANAGEMENT_PORT=7505
    networks:
      openvpn_net:
        ipv4_address: 10.20.0.4
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3

networks:
  openvpn_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.20.0.0/16
          gateway: 10.20.0.1

# Use named volumes for data persistence
volumes:
  openvpn_data:
    driver: local
